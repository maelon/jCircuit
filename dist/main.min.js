(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["jcircuit"] = factory();
	else
		root["jcircuit"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*===================================================================
#    FileName: const/index.js
#      Author: Maelon.J
#       Email: maelon.j@gmail.com
#  CreateTime: 2017-11-07 14:45
# Description: The enum of message;
===================================================================*/

var MSGEnum = function () {
    function MSGEnum() {
        _classCallCheck(this, MSGEnum);
    }

    _createClass(MSGEnum, null, [{
        key: 'NO_VALUE',
        get: function get() {
            return 'no_value';
        }
    }, {
        key: 'LINE_SWITCH_OFF',
        get: function get() {
            return 'line_switch_off';
        }
    }, {
        key: 'CIRCUIT_BREAK',
        get: function get() {
            return 'circuit_break';
        }
    }, {
        key: 'ELEMENT_INPUT_REJECT',
        get: function get() {
            return 'element_input_reject';
        }
    }]);

    return MSGEnum;
}();

exports.default = MSGEnum;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*===================================================================
#    FileName: error.js
#      Author: Maelon.J
#       Email: maelon.j@gmail.com
#  CreateTime: 2017-11-07 10:19
# Description: The enum of errors
===================================================================*/

var ErrorEnum = function () {
    function ErrorEnum() {
        _classCallCheck(this, ErrorEnum);
    }

    _createClass(ErrorEnum, null, [{
        key: 'GETDATA_INPUT_ERROR',
        get: function get() {
            return 'you should call function saveInputData in function input first!';
        }
    }, {
        key: 'GETDATA_PROCESS_ERROR',
        get: function get() {
            return 'you should call function saveProcessData in function process first!';
        }
    }, {
        key: 'GETDATA_OUTPUT_ERROR',
        get: function get() {
            return 'you should call function saveOutputData in function output first!';
        }
    }, {
        key: 'ELEMENT_ERROR',
        get: function get() {
            return 'when execute element, error happened!';
        }
    }, {
        key: 'PARALLELCIRCUIT_INPUT_DATA_ARRAY_TYPE',
        get: function get() {
            return 'error type of parallel circuit input data, it should be an array!';
        }
    }, {
        key: 'PARALLELCIRCUIT_INPUT_DATA_ARRAY_LENGTH',
        get: function get() {
            return 'error length of parallel circuit input data, it equals length of elements!';
        }
    }, {
        key: 'PARALLELCIRCUIT_PROCESS_DATA_ARRAY_TYPE',
        get: function get() {
            return 'error type of parallel circuit process data, it should be an array!';
        }
    }, {
        key: 'PARALLELCIRCUIT_PROCESS_DATA_ARRAY_LENGTH',
        get: function get() {
            return 'error length of parallel circuit process data, it equals length of elements!';
        }
    }, {
        key: 'PARALLELCIRCUIT_OUTPUT_DATA_ARRAY_TYPE',
        get: function get() {
            return 'error type of parallel circuit output data, it should be an array!';
        }
    }, {
        key: 'PARALLELCIRCUIT_OUTPUT_DATA_ARRAY_LENGTH',
        get: function get() {
            return 'error length of parallel circuit output data, it equals length of elements!';
        }
    }, {
        key: 'LINE_EXECUTE_ERROR',
        get: function get() {
            return 'when execute line, error happened';
        }
    }]);

    return ErrorEnum;
}();

exports.default = ErrorEnum;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = __webpack_require__(6);

var _index2 = _interopRequireDefault(_index);

var _interface = __webpack_require__(5);

var _interface2 = _interopRequireDefault(_interface);

var _index3 = __webpack_require__(0);

var _index4 = _interopRequireDefault(_index3);

var _error = __webpack_require__(1);

var _error2 = _interopRequireDefault(_error);

var _utils = __webpack_require__(4);

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*===================================================================
ileName: circuit/index.js
uthor: Maelon.J
mail: maelon.j@gmail.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #  CreateTime: 2017-11-06 10:33
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # Description: The base class of circuit.


/**
* The base circuit class.
* Circuit extends Element.
*/
var Circuit = function (_utils$MixinInterface) {
    _inherits(Circuit, _utils$MixinInterface);

    /**
    * @constructor
    */
    function Circuit(name) {
        _classCallCheck(this, Circuit);

        var _this = _possibleConstructorReturn(this, (Circuit.__proto__ || Object.getPrototypeOf(Circuit)).call(this, name));

        _this._elements = undefined;
        return _this;
    }

    /**
    * Append Elements.
    * @param {Element|Array<Element>} Elements needed to append.
    * @description You shoud append instance implements IElement, or return false.
    */


    _createClass(Circuit, [{
        key: 'append',
        value: function append(elements) {
            if (this._checkElementExtended(elements)) {
                var _elements;

                this._elements = this._elements || [];
                Array.isArray(elements) ? (_elements = this._elements).push.apply(_elements, _toConsumableArray(elements)) : this._elements.push(elements);
                return true;
            }
            return false;
        }

        /**
        * @description The getter function to get stored elements.
        */

    }, {
        key: '_checkElementExtended',
        value: function _checkElementExtended(elements) {
            if (Array.isArray(elements)) {
                return elements.every(function (element) {
                    return element instanceof _index2.default;
                });
            } else {
                return elements instanceof _index2.default;
            }
        }
    }, {
        key: '_processElement',
        value: function _processElement(element, ipt_data) {
            return new Promise(function (resolve, reject) {
                try {
                    var ret_ipt = element.input(ipt_data);
                    Promise.resolve(ret_ipt).then(function (ipt) {
                        if (ipt) {
                            var ret_pcs = element.process();
                            Promise.resolve(ret_pcs).then(function () {
                                var ret_opt = element.output();
                                Promise.resolve(ret_opt).then(function (opt) {
                                    resolve(opt);
                                });
                            });
                        } else {
                            resolve(_index4.default.ELEMENT_INPUT_REJECT);
                        }
                    });
                } catch (e) {
                    reject(_error2.default.ELEMENT_ERROR);
                }
            });
        }
    }, {
        key: 'elements',
        get: function get() {
            return this._elements;
        }
    }]);

    return Circuit;
}(_utils2.default.MixinInterface(_index2.default, _interface2.default));

exports.default = Circuit;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*===================================================================
#    FileName: element/interface.js
#      Author: Maelon.J
#       Email: maelon.j@gmail.com
#  CreateTime: 2017-11-06 09:51
# Description: The interface of element.
===================================================================*/

/**
 * The interface of element
 * @class
 */
var Interface = function () {
  function Interface() {
    _classCallCheck(this, Interface);
  }

  _createClass(Interface, [{
    key: 'input',


    /**
     * @abstract
     * @param {*} data - The input data.
     * @return {Promise|boolean} - Return true will enter next process or not will break or a promise.
     * @description The entry of the element.
     */
    value: function input(data) {
      throw new Error('must be implemented by subclass!');
    }

    /**
     * @abstract
     * @return {Promise|undefined} - Return a promise object for asynchronous process or undefined for synchronous.
     */

  }, {
    key: 'process',
    value: function process() {
      throw new Error('must be implemented by subclass!');
    }

    /**
     * @abstract
     * @return {Promise|*} - Return the output data.
     */

  }, {
    key: 'output',
    value: function output() {
      throw new Error('must be implemented by subclass!');
    }
  }]);

  return Interface;
}();

exports.default = Interface;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*===================================================================
#    FileName: utils/index.js
#      Author: Maelon.J
#       Email: maelon.j@gmail.com
#  CreateTime: 2017-11-02 15:55
# Description: utils for jcircuit
===================================================================*/

var utils = {
    clone: function clone(obj) {
        if (typeof obj == "function" || Object(obj) !== obj) {
            return obj;
        }
        var res = new obj.constructor();
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                res[key] = this.clone(obj[key]);
            }
        }
        return res;
    },
    MixinInterface: function MixinInterface(cls, itf) {
        var MixinClass = function (_cls) {
            _inherits(MixinClass, _cls);

            function MixinClass() {
                _classCallCheck(this, MixinClass);

                return _possibleConstructorReturn(this, (MixinClass.__proto__ || Object.getPrototypeOf(MixinClass)).apply(this, arguments));
            }

            return MixinClass;
        }(cls);

        var itf_protoKeys = Object.getOwnPropertyNames(itf.prototype);
        itf_protoKeys.forEach(function (key) {
            if (key !== 'constructor') {
                Object.defineProperty(MixinClass.prototype, key, Object.getOwnPropertyDescriptor(itf.prototype, key));
            }
        });
        return MixinClass;
    }
};

exports.default = utils;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _interface = __webpack_require__(3);

var _interface2 = _interopRequireDefault(_interface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*===================================================================
ileName: circuit/interface.js
uthor: Maelon.J
mail: maelon.j@gmail.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #  CreateTime: 2017-09-29 11:32
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # Description: A circuit consist of some elements or circuits.
t extends interface of element, but has more features: append.
o, it has one input, output and process in the same way.


/**
 * Composed by somes IElement.
 * @class
*/
var Interface = function (_IElement) {
    _inherits(Interface, _IElement);

    function Interface() {
        _classCallCheck(this, Interface);

        return _possibleConstructorReturn(this, (Interface.__proto__ || Object.getPrototypeOf(Interface)).apply(this, arguments));
    }

    _createClass(Interface, [{
        key: 'append',

        /**
        * @abstract
        * @param {Element|Array<Element>} The appended elements;
        * @return {boolean} Whether elements appended is successful.
        */
        value: function append(elements) {
            throw new Error('must be implemented by subclass!');
        }
    }]);

    return Interface;
}(_interface2.default);

exports.default = Interface;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _interface = __webpack_require__(3);

var _interface2 = _interopRequireDefault(_interface);

var _index = __webpack_require__(0);

var _index2 = _interopRequireDefault(_index);

var _error = __webpack_require__(1);

var _error2 = _interopRequireDefault(_error);

var _utils = __webpack_require__(4);

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*===================================================================
ileName: element/index.js
uthor: Maelon.J
mail: maelon.j@gmail.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #  CreateTime: 2017-09-29 11:21
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # Description: The base unit of jCircuit.


/**
 * The base unit of a circuit.
 * It's composed of input, output and process, like a electrical element.
 * One element only contains one input, and one output, and one process.
 * The input starts process.
 * The output is called by process when it is done.
 * @class
 */
var Element = function (_IElement) {
    _inherits(Element, _IElement);

    /**
     * Create an element.
     * @constructor
     */
    function Element(name) {
        _classCallCheck(this, Element);

        var _this = _possibleConstructorReturn(this, (Element.__proto__ || Object.getPrototypeOf(Element)).call(this));

        _this._name = String(name);
        _this._data_input = _index2.default.NO_VALUE;
        _this._data_process = _index2.default.NO_VALUE;
        _this._data_output = _index2.default.NO_VALUE;
        return _this;
    }

    /**
     * @param {*} data - The input data.
     * @return {Promise|boolean} - Return true will enter next process or not will break or a promise.
     * @description The entry of the element. At last, you should call setter function dataSource to save input data;
     */


    _createClass(Element, [{
        key: 'input',
        value: function input(data) {}

        /**
         * @return {Promise|undefined} - Return a promise object for asynchronous process or undefined for synchronous.
         * @description In this, you can call getter function dataSource to get input data. At last, you should also call setter function dataResult to save processed data.
         */

    }, {
        key: 'process',
        value: function process() {}

        /**
         * @return {Promise|*} data - Return the output data.
         * @description In this, you can call getter function dataResult to get processed data. At last, you should return the filnal data.
         */

    }, {
        key: 'output',
        value: function output() {}

        /**
        * @return {string} - Return the name of the element.
        */

    }, {
        key: 'saveInputData',


        /**
        * @param {Object} data - The data to be saved.
        * @description At the last of input, should call this to save treated data.
        */
        value: function saveInputData(data) {
            this._data_input = data;
        }

        /**
        * @return {Object} data - Return the treated input data.
        */

    }, {
        key: 'getInputData',
        value: function getInputData() {
            if (this._data_input === _index2.default.NO_VALUE) {
                throw new Error(_error2.default.GETDATA_INPUT_ERROR);
            }
            return _utils2.default.clone(this._data_input);
        }

        /**
        * @param {Object} data - The data to be saved.
        * @description At the last of process, should call this to save treated process data.
        */

    }, {
        key: 'saveProcessData',
        value: function saveProcessData(data) {
            this._data_process = data;
        }

        /**
        * @return {Object} data - Return the treated process data.
        */

    }, {
        key: 'getProcessData',
        value: function getProcessData() {
            if (this._data_process === _index2.default.NO_VALUE) {
                throw new Error(_error2.default.GETDATA_PROCESS_ERROR);
            }
            return _utils2.default.clone(this._data_process);
        }

        /**
        * @param {Object} data - The data to be saved.
        * @description At the last of output, should call this to save treated output data.
        */

    }, {
        key: 'saveOutputData',
        value: function saveOutputData(data) {
            this._data_output = data;
        }

        /**
        * @return {Object} data - Return the treated output data.
        */

    }, {
        key: 'getOutputData',
        value: function getOutputData() {
            if (this._data_output === _index2.default.NO_VALUE) {
                throw new Error(_error2.default.GETDATA_OUTPUT_ERROR);
            }
            return _utils2.default.clone(this._data_output);
        }
    }, {
        key: 'elementName',
        get: function get() {
            return this._name;
        }
    }]);

    return Element;
}(_interface2.default);

exports.default = Element;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _interface = __webpack_require__(5);

var _interface2 = _interopRequireDefault(_interface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*===================================================================
ileName: line/interface.js
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #      Author: Maelon.J
mail: maelon.j@gmail.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #  CreateTime: 2017-11-07 10:57
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # Description: work line with a switch consists of some elements or circuits.


/**
* Line likes workflow, consists of some elements or circuits.
* @class
*/
var Line = function (_ICircuit) {
    _inherits(Line, _ICircuit);

    function Line() {
        _classCallCheck(this, Line);

        return _possibleConstructorReturn(this, (Line.__proto__ || Object.getPrototypeOf(Line)).apply(this, arguments));
    }

    _createClass(Line, [{
        key: 'switch',


        /**
        * @param {string} flag - 'on' will start to process the line, 'off' will stop the line immediately.
        * @param {Object} data - The initial data.
        * @return {boolean} - Whether witch success.
        */
        value: function _switch(flag, data) {
            throw new Error('must be implemented by subclass!');
        }
    }]);

    return Line;
}(_interface2.default);

exports.default = Line;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*===================================================================
ileName: jcircuit.js
uthor: Maelon.J
mail: maelon.j@gmail.com
reateTime: 2017-09-02 11:13
escription: jCircuit main class.


var _interface = __webpack_require__(3);

var _interface2 = _interopRequireDefault(_interface);

var _index = __webpack_require__(6);

var _index2 = _interopRequireDefault(_index);

var _interface3 = __webpack_require__(5);

var _interface4 = _interopRequireDefault(_interface3);

var _index3 = __webpack_require__(2);

var _index4 = _interopRequireDefault(_index3);

var _parallel = __webpack_require__(9);

var _parallel2 = _interopRequireDefault(_parallel);

var _serial = __webpack_require__(10);

var _serial2 = _interopRequireDefault(_serial);

var _interface5 = __webpack_require__(7);

var _interface6 = _interopRequireDefault(_interface5);

var _index5 = __webpack_require__(11);

var _index6 = _interopRequireDefault(_index5);

var _index7 = __webpack_require__(0);

var _index8 = _interopRequireDefault(_index7);

var _error = __webpack_require__(1);

var _error2 = _interopRequireDefault(_error);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* jCircuit is a simple javascript framework.
* It works like circuit.
*/
var JCircuit = function () {
    function JCircuit() {
        _classCallCheck(this, JCircuit);
    }

    _createClass(JCircuit, null, [{
        key: 'IElement',
        get: function get() {
            return _interface2.default;
        }
    }, {
        key: 'Element',
        get: function get() {
            return _index2.default;
        }
    }, {
        key: 'ICircuit',
        get: function get() {
            return _interface4.default;
        }
    }, {
        key: 'Circuit',
        get: function get() {
            return _index4.default;
        }
    }, {
        key: 'ParallelCircuit',
        get: function get() {
            return _parallel2.default;
        }
    }, {
        key: 'SerialCircuit',
        get: function get() {
            return _serial2.default;
        }
    }, {
        key: 'ILine',
        get: function get() {
            return _interface6.default;
        }
    }, {
        key: 'Line',
        get: function get() {
            return _index6.default;
        }
    }, {
        key: 'MSG_SIGNAL',
        get: function get() {
            return _index8.default;
        }
    }, {
        key: 'ERROR_SIGNAL',
        get: function get() {
            return _error2.default;
        }
    }]);

    return JCircuit;
}();

exports.default = JCircuit;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = __webpack_require__(2);

var _index2 = _interopRequireDefault(_index);

var _index3 = __webpack_require__(0);

var _index4 = _interopRequireDefault(_index3);

var _error = __webpack_require__(1);

var _error2 = _interopRequireDefault(_error);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*===================================================================
ileName: parallel.js
uthor: Maelon.J
mail: maelon.j@gmail.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #  CreateTime: 2017-10-13 12:19
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # Description: Extend the base class Circuit.


/**
* Parallelly process the stored elements.
* @class
*/
var ParallelCircuit = function (_Circuit) {
    _inherits(ParallelCircuit, _Circuit);

    /**
    * @constructor
    */
    function ParallelCircuit() {
        _classCallCheck(this, ParallelCircuit);

        return _possibleConstructorReturn(this, (ParallelCircuit.__proto__ || Object.getPrototypeOf(ParallelCircuit)).call(this));
    }

    /**
    * @description Process elements stored in parallel.
    */


    _createClass(ParallelCircuit, [{
        key: 'process',
        value: function process() {
            var elements = this.elements.slice();
            var datas = this.getInputData();
            var elements_promise = [];
            for (var i = 0; i < elements.length; i++) {
                elements_promise.push(this._processElement(elements[i], datas[i]));
            }
            return Promise.all(elements_promise);
        }
    }, {
        key: 'saveInputData',
        value: function saveInputData(data) {
            if (Array.isArray(data)) {
                if (data.length == this.elements.length) {
                    _get(ParallelCircuit.prototype.__proto__ || Object.getPrototypeOf(ParallelCircuit.prototype), 'saveInputData', this).call(this, data);
                    return;
                }
                throw new Error(_error2.default.PARALLELCIRCUIT_INPUT_DATA_ARRAY_LENGTH);
            }
            throw new Error(_error2.default.PARALLELCIRCUIT_INPUT_DATA_ARRAY_TYPE);
        }
    }, {
        key: 'saveProcessData',
        value: function saveProcessData(data) {
            if (Array.isArray(data)) {
                if (data.length == this.elements.length) {
                    _get(ParallelCircuit.prototype.__proto__ || Object.getPrototypeOf(ParallelCircuit.prototype), 'saveProcessData', this).call(this, data);
                    return;
                }
                throw new Error(_error2.default.PARALLELCIRCUIT_PROCESS_DATA_ARRAY_LENGTH);
            }
            throw new Error(_error2.default.PARALLELCIRCUIT_PROCESS_DATA_ARRAY_TYPE);
        }
    }, {
        key: 'saveOutputData',
        value: function saveOutputData(data) {
            if (Array.isArray(data)) {
                if (data.length == this.elements.length) {
                    _get(ParallelCircuit.prototype.__proto__ || Object.getPrototypeOf(ParallelCircuit.prototype), 'saveOutputData', this).call(this, data);
                    return;
                }
                throw new Error(_error2.default.PARALLELCIRCUIT_OUTPUT_DATA_ARRAY_LENGTH);
            }
            throw new Error(_error2.default.PARALLELCIRCUIT_OUTPUT_DATA_ARRAY_TYPE);
        }
    }]);

    return ParallelCircuit;
}(_index2.default);

exports.default = ParallelCircuit;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = __webpack_require__(2);

var _index2 = _interopRequireDefault(_index);

var _index3 = __webpack_require__(0);

var _index4 = _interopRequireDefault(_index3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*===================================================================
ileName: serial.js
uthor: Maelon.J
mail: maelon.j@gmail.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #  CreateTime: 2017-10-13 12:21
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               # Description: Extend the base class of Circuit.


/**
* Serially process the stored elements.
* @class
*/
var SerialCircuit = function (_Circuit) {
    _inherits(SerialCircuit, _Circuit);

    /**
    * @constructor
    */
    function SerialCircuit() {
        _classCallCheck(this, SerialCircuit);

        return _possibleConstructorReturn(this, (SerialCircuit.__proto__ || Object.getPrototypeOf(SerialCircuit)).call(this));
    }

    /**
    * @description Process elements stored in serial.
    */


    _createClass(SerialCircuit, [{
        key: 'process',
        value: function process() {
            var _this2 = this;

            var elements = this.elements.slice();
            var data = this.getInputData();
            var elements_promise = Promise.resolve(data);

            var _loop = function _loop(i) {
                elements_promise = elements_promise.then(function (ret, name) {
                    if (ret === _index4.default.ELEMENT_INPUT_REJECT) {
                        return Promise.resolve(ret, name || elements[i].elementName);
                    }
                    return _this2._processElement(elements[i], ret);
                });
            };

            for (var i = 0; i < elements.length; i++) {
                _loop(i);
            }
            return elements_promise;
        }
    }]);

    return SerialCircuit;
}(_index2.default);

exports.default = SerialCircuit;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _index = __webpack_require__(2);

var _index2 = _interopRequireDefault(_index);

var _interface = __webpack_require__(7);

var _interface2 = _interopRequireDefault(_interface);

var _index3 = __webpack_require__(0);

var _index4 = _interopRequireDefault(_index3);

var _error = __webpack_require__(1);

var _error2 = _interopRequireDefault(_error);

var _index5 = __webpack_require__(4);

var _index6 = _interopRequireDefault(_index5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*===================================================================
ileName: line/index.js
uthor: Maelon.J
mail: maelon.j@gmail.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               #  CreateTime: 2017-11-08 10:12


var Line = function (_utils$MixinInterface) {
    _inherits(Line, _utils$MixinInterface);

    /**
    * @constructor
    */
    function Line(name) {
        _classCallCheck(this, Line);

        var _this = _possibleConstructorReturn(this, (Line.__proto__ || Object.getPrototypeOf(Line)).call(this, name));

        _this._switch_state = 'off';
        return _this;
    }

    _createClass(Line, [{
        key: 'switch',
        value: function _switch(flag, data) {
            var _this2 = this;

            if (['on', 'off'].includes(flag)) {
                if (flag != this._switch_state) {
                    if (flag === 'on') {
                        this._processElement(this, data).then(function (ret) {
                            console.log('line over', ret);
                            _this2.saveProcessData(ret);
                        }).catch(function (error) {
                            if (error === _error2.default.ELEMENT_ERROR) {
                                console.log(_error2.default.LINE_EXECUTE_ERROR);
                            }
                        });
                    }
                    this._switch_state = flag;
                    return true;
                }
            }
            return false;
        }
    }, {
        key: 'append',
        value: function append(elements) {
            return _get(Line.prototype.__proto__ || Object.getPrototypeOf(Line.prototype), 'append', this).call(this, elements);
        }

        /**
        * @description Process elements stored in serial.
        */

    }, {
        key: 'process',
        value: function process() {
            var _this3 = this;

            var elements = this.elements.slice();
            var data = this.getInputData();
            var elements_promise = Promise.resolve(data);

            var _loop = function _loop(i) {
                elements_promise = elements_promise.then(function (ret, name) {
                    console.log('line process', i, ret, name);
                    if (ret === _index4.default.LINE_SWITCH_OFF || _this3._switch_state === 'off') {
                        return Promise.resolve(_index4.default.LINE_SWITCH_OFF);
                    }
                    if (ret === _index4.default.CIRCUIT_BREAK) {
                        return Promise.resolve(ret, name || elements[i].elementName);
                    }
                    return _this3._processElement(elements[i], ret);
                });
            };

            for (var i = 0; i < elements.length; i++) {
                _loop(i);
            }
            return elements_promise;
        }
    }]);

    return Line;
}(_index6.default.MixinInterface(_index2.default, _interface2.default));

exports.default = Line;

/***/ })
/******/ ]);
});